// API Highjack

// what to do.. ?

// perhaps some kind of exchange...
// public, open exchange..
// interface is bundled up, so nothing inside can be stolen.

// how does exchange work.. ?

// initialize a bunch of wallets..
// expose an interface.. that expects something..

// NO --> a mint, which exposes an offer :: give me 5 cash tokens, and I will give you a gold token
// can be highjacked in 2 ways ::
// 1 is to set up a listener on the exchange address to get all the submissions
// 2 is to 


// BETTER :: create a vault :: this vault accepts purses and stores them somewhere safe.
// send it a purse, and it returns you a ticket.
// sort of like the coat check example ==> could even use this as the example.


new Vault in {
    contract @"Vault"(return) = {
        new vault, storage in {
            contract @[*vault, "deposit"](@purse, return) = {
                new ticket in {
                    @{*storage | *ticket}!(purse)
                    | return!(*ticket)
                }
            }
            | contract @[*vault, "fetch"](ticket, return) = {
                new fetch in {
                    for(@purse <- @{*storage, *ticket}) {
                        return!(purse)
                    }
                }
            }
            return!(*vault)
        }
    }
    
    // create new vault
    new makeVault in {
        for (@vault <- Vault(*makeVault)) {

            // ASSUME that Vault is public
            // e.g. @"Vault"!!(vault)
            
            new success in {
                @[*vault, "deposit"]!(@"a real purse", *success)
            }

            // attack 1 :: steal purse
            for (@stolenPurse <- @[vault, "deposit"]) {
                // do something with purse
            }

            // attack 2 :: steal key
            
            
        }
    }
    
}

