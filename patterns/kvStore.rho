new KVStore in {
    contract KVStore(c) = {
        new this, getStore, getExport in {
            // initialize Store with Nil object -- this is what default match will find
            getStore!(Nil)
            // export write-only interface
            | getExport!(bundle+{*this})

            | contract @(*this, "put")(key, @value, c) = {
                for (@store <- getStore) {
                    match store {
                        {@=*key!(_) | _ } => {
                            getStore!(store)
                            | c!(@"error"!("Key already exists"))
                        }
                        _ => {
                            getStore!(store | key!(value)) // @(*this, "put")!("myVal", 42, *putVar) ::> getStore!(Nil|@"myVal"!(42) | @"myVal"!(42)| @"myVal"!(42) | @secretKey!(@"complexData"!("a") | 42))
                        }
                    }
                }
            }

            | contract @(*this, "patch")(key, @value, c) = {
                for (@store <- getStore) {
                    match store {
                        {@=*key!(_) | rest} => {
                            getStore!(key!(value) | rest)
                        }
                        _ => {
                            getStore!(store)
                            | c!(@"error"!("Key does not exist"))
                        }
                    }
                }
            }

            | contract @(*this, "get")(key, c) = {
                for (@store <- getStore) {
                    getStore!(store)
                    | match store {
                        {@=*key!(value) | _} => {
                            c!(value)
                        }
                        _ => {
                            c!(@"error"!("Key does not exist"))
                        }
                    }
                }
            }
            
            | contract @(*this, "del")(key, c) = {
                for (@store <- getStore) {
                    match store {
                        {@=*key!(_) | rest} => {
                            c!(true) | getStore!(rest)
                        }
                        _ => {
                            c!(false) | getStore!(store)
                        }
                    }
                }
            }

            | contract @(*this, "exists")(key, c) = {
                for (@store <- getStore) {
                    getStore!(store)
                    | match store {
                        {@=*key!(_) | _ /*rest*/} => {
                            c!(true)
                        }
                        _ => {
                            c!(false)
                        }
                    }
                }
            }

            // | contract @(*this, "query")(@query, c) = {
            //     for (@store <- getStore) {
            //         match store {
            //             =query {}
            //         }
            //     }
            // }

            | for(@export <- getExport) {
                c!(export)
            }
        }
        

    }

}