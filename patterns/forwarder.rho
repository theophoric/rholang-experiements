new SimpleForwarder in {
    contract SimpleForwarder(process, c) = {
        new forwarder, getStatus, revoke
        in {
            getStatus!(true)
            
            | contract forwarder(@message, c) = {
                for(@isValid <- getStatus) {
                    getStatus!(isValid)
                    | match isValid {
                        true => {
                            process!(message, *c)
                        }
                        false => {
                            c!(Nil)
                        }
                    }
                }
            }


            | contract revoke(c) = {
                for(_ <- getStatus) {
                    getStatus!(false)
                    | c!(true)
                }
            }
            
        }
        // return revoke
        | c!(bundle+{*forwarder}, bundle+{*revoke})
    }
}


new Forwarder in {
    contract Forwarder(@process, c) = {
        new this, getExport,
            getValidTokens,
            createToken
        in {
            getExport!(bundle+{*this})
            | getValidTokens!(Nil)

            | contract createToken(@allowedMethods, c) = {
                new token, revokeToken in {

                    contract token(@method, @message, c) = {
                        for (@validTokens <- getValidTokens) {
                            getValidTokens!(validTokens)
                            | match validTokens  {
                                {=*token | _} => {
                                    match allowedMethods {
                                        {=method | _} => {
                                            process!(method, message, *c)
                                            // or @{*scope | method}!(message, c)
                                        }
                                        _ => {
                                            c!(@"error"!("invalid token / token has been revoked"))
                                        }
                                    }
                                }
                            }
                        }
                    }
                    | contract revokeToken(c) = {
                        for(@{=*token | rest} <- getValidTokens) {
                            getValidTokens!(rest)
                            | c!(true)
                        }
                    }
                    
                    // register token
                    | for(@tokens <- getValidTokens) {
                        getValidTokens!(*token | tokens)
                    }
                    
                    // return token and revokeToken
                    | c!(bundle+{*token}, bundle+{*revokeToken})
                }
            }

            // method dispatch
            | contract this(@method, @message, c) = {
                match method {
                    "createToken" => { createToken!(message, *c)}
                    _ => { c!(@"error"!("undefined method")) }
                }
            }

            
            | for(@export <- getExport) {
                c!(export)
            }
        }
    }
}


import Forwarder in {
    new Car in {
        contract Car(c) = {
            new this,
                unlock, start
            in {
                contract this(@method, @message, c) ={
                    match method with {
                        "unlock" => {unlock!(*c)}
                        "start" => {start!(*c)}
                        "unlockGloveCompartment" => {unlockGloveCompartment!(*c)}
                        _ => {c!(@"error"!("unlisted method"))}
                    }
                }
                contract unlock(c) = {
                    c!(@"message"!("beep beep"))
                }

                contract start(c) = {
                    c!(@"message"!("vroom vroom"))
                }

                contract unlockGloveCompartment(c) = {
                    c!(@"message"!("look, gloves!"))
                }

                c!(bundle+{*this})
            }
        }
    }
    | new getCar, getForwarder in {
        Car!(*getCar) 
        | for(@car <- getCar) {
            Forwarder(car, *getForwarder)
            | for(forwarder <- getForwarder) {
                new getValetToken, getOwnerToken in {
                    forwarder!("createForwarder", {"unlock" | "start"}, *getValetToken)
                    | forwarder!("createForwarder", {"unlock" | "start" | "openGloveCompartment"}, *getOwnerToken)
                    | for(valetToken, valetTokenRevoke <- getValetToken; ownerToken, valetTokenRevoke <- getOwnerToken) {
                        valetTokenRevoke!(Nil)
                        | valetKey!("unlock", c)
                        | for (@response <- c) {
                            match response with {
                                @"error"!(errMessage) => {
                                    
                                }
                                @"success"!(successMessage) => {

                                }
                            }
                        }

                        

                    }
                }
                
            }
        }
        
    }
}