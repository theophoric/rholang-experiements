contract Constructor(@init, c) = {
    new object, // export
        dispatch, internalDispatcher,
        privateMethod,
        getExport, getPrivateVariable, 
        privateFunction
    in {

        // set getters / "variables"
        // export object is write-only interface channel
        getExport!!(bundle+{*object})
        | match init with {
            ["initVariable", privateVariable] => { getPrivateVariable!(privateVariable)}
        }
        
        
        // build interface
        
        // base handler
        | contract object(message, c) = {

        }

        // dispatcher
        | contract dispatch(message, c) = {
            match message with {
                [{ method /\ String}, input] => {
                    @{*internalDispatcher | method}!(input, c)
                }
            }
        }

        // composition interface
        | contract @{*object | *privateMethod} = { }
        | contract @{*object | "publicMethod"} = { }

        // array interface
        | contract @[*object, *privateMethod] = { }
        | contract @[*object, "publicMethod"] = { }

        // return constructed reference
        return!(bundle+{*object})
    }
}